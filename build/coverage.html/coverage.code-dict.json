{"/home/travis/build/npmtest/node-npmtest-cosmiconfig/test.js":"/* istanbul instrument in package npmtest_cosmiconfig */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cosmiconfig/lib.npmtest_cosmiconfig.js":"/* istanbul instrument in package npmtest_cosmiconfig */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cosmiconfig = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cosmiconfig = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cosmiconfig/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cosmiconfig && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cosmiconfig */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cosmiconfig\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cosmiconfig.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_cosmiconfig.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cosmiconfig.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_cosmiconfig.__dirname + '/lib.npmtest_cosmiconfig.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cosmiconfig/node_modules/cosmiconfig/index.js":"'use strict';\n\nvar path = require('path');\nvar oshomedir = require('os-homedir');\nvar minimist = require('minimist');\nvar assign = require('object-assign');\nvar createExplorer = require('./lib/createExplorer');\n\nvar parsedCliArgs = minimist(process.argv);\n\nmodule.exports = function (moduleName, options) {\n  options = assign({\n    packageProp: moduleName,\n    rc: '.' + moduleName + 'rc',\n    js: moduleName + '.config.js',\n    argv: 'config',\n    rcStrictJson: false,\n    stopDir: oshomedir(),\n    cache: true,\n  }, options);\n\n  if (options.argv && parsedCliArgs[options.argv]) {\n    options.configPath = path.resolve(parsedCliArgs[options.argv]);\n  }\n\n  return createExplorer(options);\n};\n","/home/travis/build/npmtest/node-npmtest-cosmiconfig/node_modules/cosmiconfig/lib/createExplorer.js":"'use strict';\n\nvar path = require('path');\nvar fs = require('fs');\nvar loadPackageProp = require('./loadPackageProp');\nvar loadRc = require('./loadRc');\nvar loadJs = require('./loadJs');\nvar loadDefinedFile = require('./loadDefinedFile');\n\nmodule.exports = function (options) {\n  // These cache Promises that resolve with results, not the results themselves\n  var fileCache = (options.cache) ? new Map() : null;\n  var directoryCache = (options.cache) ? new Map() : null;\n  var transform = options.transform || identityPromise;\n\n  function clearFileCache() {\n    if (fileCache) fileCache.clear();\n  }\n\n  function clearDirectoryCache() {\n    if (directoryCache) directoryCache.clear();\n  }\n\n  function clearCaches() {\n    clearFileCache();\n    clearDirectoryCache();\n  }\n\n  function load(searchPath, configPath) {\n    if (configPath) {\n      var absoluteConfigPath = path.resolve(process.cwd(), configPath);\n      if (fileCache && fileCache.has(absoluteConfigPath)) {\n        return fileCache.get(absoluteConfigPath);\n      }\n      var result = loadDefinedFile(absoluteConfigPath, options)\n        .then(transform);\n      if (fileCache) fileCache.set(absoluteConfigPath, result);\n      return result;\n    }\n\n    if (!searchPath) return Promise.resolve(null);\n\n    var absoluteSearchPath = path.resolve(process.cwd(), searchPath);\n\n    return isDirectory(absoluteSearchPath)\n      .then(function (searchPathIsDirectory) {\n        var directory = (searchPathIsDirectory)\n          ? absoluteSearchPath\n          : path.dirname(absoluteSearchPath);\n        return searchDirectory(directory);\n      });\n  }\n\n  function searchDirectory(directory) {\n    if (directoryCache && directoryCache.has(directory)) {\n      return directoryCache.get(directory);\n    }\n\n    var result = Promise.resolve()\n      .then(function () {\n        if (!options.packageProp) return;\n        return loadPackageProp(directory, options);\n      })\n      .then(function (result) {\n        if (result || !options.rc) return result;\n        return loadRc(path.join(directory, options.rc), options);\n      })\n      .then(function (result) {\n        if (result || !options.js) return result;\n        return loadJs(path.join(directory, options.js));\n      })\n      .then(function (result) {\n        if (result) return result;\n\n        var splitPath = directory.split(path.sep);\n        var nextDirectory = (splitPath.length > 1)\n          ? splitPath.slice(0, -1).join(path.sep)\n          : null;\n\n        if (!nextDirectory || directory === options.stopDir) return null;\n\n        return searchDirectory(nextDirectory);\n      })\n      .then(transform);\n\n    if (directoryCache) directoryCache.set(directory, result);\n    return result;\n  }\n\n  return {\n    load: load,\n    clearFileCache: clearFileCache,\n    clearDirectoryCache: clearDirectoryCache,\n    clearCaches: clearCaches,\n  };\n};\n\nfunction isDirectory(filepath) {\n  return new Promise(function (resolve, reject) {\n    fs.stat(filepath, function (err, stats) {\n      if (err) return reject(err);\n      return resolve(stats.isDirectory());\n    });\n  });\n}\n\nfunction identityPromise(x) {\n  return Promise.resolve(x);\n}\n","/home/travis/build/npmtest/node-npmtest-cosmiconfig/node_modules/cosmiconfig/lib/loadPackageProp.js":"'use strict';\n\nvar path = require('path');\nvar parseJson = require('parse-json');\nvar readFile = require('./readFile');\n\nmodule.exports = function (packageDir, options) {\n  var packagePath = path.join(packageDir, 'package.json');\n\n  return readFile(packagePath).then(function (content) {\n    if (!content) return null;\n    var parsedContent = parseJson(content, packagePath);\n    var packagePropValue = parsedContent[options.packageProp];\n    if (!packagePropValue) return null;\n\n    return {\n      config: packagePropValue,\n      filepath: packagePath,\n    };\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-cosmiconfig/node_modules/cosmiconfig/lib/readFile.js":"'use strict';\n\nvar fs = require('fs');\n\nmodule.exports = function (filepath, options) {\n  options = options || {};\n  options.throwNotFound = options.throwNotFound || false;\n\n  return new Promise(function (resolve, reject) {\n    fs.readFile(filepath, 'utf8', function (err, content) {\n      if (err && err.code === 'ENOENT' && !options.throwNotFound) {\n        return resolve(null);\n      }\n\n      if (err) return reject(err);\n\n      resolve(content);\n    });\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-cosmiconfig/node_modules/cosmiconfig/lib/loadRc.js":"'use strict';\n\nvar yaml = require('js-yaml');\nvar parseJson = require('parse-json');\nvar requireFromString = require('require-from-string');\nvar readFile = require('./readFile');\n\nmodule.exports = function (filepath, options) {\n  return loadExtensionlessRc().then(function (result) {\n    if (result) return result;\n    if (options.rcExtensions) return loadRcWithExtensions();\n    return null;\n  });\n\n  function loadExtensionlessRc() {\n    return readRcFile().then(function (content) {\n      if (!content) return null;\n\n      var pasedConfig = (options.rcStrictJson)\n        ? parseJson(content, filepath)\n        : yaml.safeLoad(content, {\n          filename: filepath,\n        });\n      return {\n        config: pasedConfig,\n        filepath: filepath,\n      };\n    });\n  }\n\n  function loadRcWithExtensions() {\n    return readRcFile('json').then(function (content) {\n      if (content) {\n        var successFilepath = filepath + '.json';\n        return {\n          config: parseJson(content, successFilepath),\n          filepath: successFilepath,\n        };\n      }\n      // If not content was found in the file with extension,\n      // try the next possible extension\n      return readRcFile('yaml');\n    }).then(function (content) {\n      if (content) {\n        // If the previous check returned an object with a config\n        // property, then it succeeded and this step can be skipped\n        if (content.config) return content;\n        // If it just returned a string, then *this* check succeeded\n        var successFilepath = filepath + '.yaml';\n        return {\n          config: yaml.safeLoad(content, { filename: successFilepath }),\n          filepath: successFilepath,\n        };\n      }\n      return readRcFile('yml');\n    }).then(function (content) {\n      if (content) {\n        if (content.config) return content;\n        var successFilepath = filepath + '.yml';\n        return {\n          config: yaml.safeLoad(content, { filename: successFilepath }),\n          filepath: successFilepath,\n        };\n      }\n      return readRcFile('js');\n    }).then(function (content) {\n      if (content) {\n        if (content.config) return content;\n        var successFilepath = filepath + '.js';\n        return {\n          config: requireFromString(content, successFilepath),\n          filepath: successFilepath,\n        };\n      }\n      return null;\n    });\n  }\n\n  function readRcFile(extension) {\n    var filepathWithExtension = (extension)\n      ? filepath + '.' + extension\n      : filepath;\n    return readFile(filepathWithExtension);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-cosmiconfig/node_modules/cosmiconfig/lib/loadJs.js":"'use strict';\n\nvar requireFromString = require('require-from-string');\nvar readFile = require('./readFile');\n\nmodule.exports = function (filepath) {\n  return readFile(filepath).then(function (content) {\n    if (!content) return null;\n\n    return {\n      config: requireFromString(content, filepath),\n      filepath: filepath,\n    };\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-cosmiconfig/node_modules/cosmiconfig/lib/loadDefinedFile.js":"'use strict';\n\nvar yaml = require('js-yaml');\nvar parseJson = require('parse-json');\nvar requireFromString = require('require-from-string');\nvar readFile = require('./readFile');\n\nmodule.exports = function (filepath, options) {\n  return readFile(filepath, { throwNotFound: true }).then(function (content) {\n    var parsedConfig = (function () {\n      switch (options.format) {\n        case 'json':\n          return parseJson(content, filepath);\n        case 'yaml':\n          return yaml.safeLoad(content, {\n            filename: filepath,\n          });\n        case 'js':\n          return requireFromString(content, filepath);\n        default:\n          return tryAllParsing(content, filepath);\n      }\n    })();\n\n    if (!parsedConfig) {\n      throw new Error(\n        'Failed to parse \"' + filepath + '\" as JSON, JS, or YAML.'\n      );\n    }\n\n    return {\n      config: parsedConfig,\n      filepath: filepath,\n    };\n  });\n};\n\nfunction tryAllParsing(content, filepath) {\n  return tryYaml(content, filepath, function () {\n    return tryRequire(content, filepath, function () {\n      return null;\n    });\n  });\n}\n\nfunction tryYaml(content, filepath, cb) {\n  try {\n    var result = yaml.safeLoad(content, {\n      filename: filepath,\n    });\n    if (typeof result === 'string') {\n      return cb();\n    }\n    return result;\n  } catch (e) {\n    return cb();\n  }\n}\n\nfunction tryRequire(content, filepath, cb) {\n  try {\n    return requireFromString(content, filepath);\n  } catch (e) {\n    return cb();\n  }\n}\n"}